The focus on software development is around the data rather around the functions.

OOPs:
1. Class
2. Object


1. Class: Class is a blueprint/Description/Logical Entity

Describing about an Entity through its properties and actions is called Class.

A class is blueprint of an entity

All classes logical entities.

2. Object: Object is an instance of a class/ Physical Entities.
3. Member Variables: Member Variables are the properties of the class --> 
4. Member Methods: Member Methods are the actions defined in the class. 

Define Human.


**Constructor**: Constructor will instantiate an object.

. ==> Membership Operator.

1. Default Constructor
    -> Every class will have a default constructor.
2. Constructors with no parameters
3. Constructors with parameters
4. Copy Constructures

Constructor Overloading --> Python doesn't support it.

Abstraction(ADT): Data hiding

Access Specifiers: ==> Private Protected Public

__ ==> Access Specifier for Private
_ ==> Acess Specifier for Protected

Encapsulation: Binding Member Variables and Member functions

Instance Variables/Functions:

1. By Default every function is instance function
2. Variables defined inside constructor or defined using self keyword are called instance variables.
3. An instance function will have self keyword the argument list

Class Variables/Class Functions:

1. A class variable is a variables in the class outside of all the functions 
2. A class function is a function in the class with "cls" as a parameter in the function and @classmethod as decorator.

Every class variable/class function is globally accessible for every object/instance.


All Private Variables and All Private methods will be accessible inside the class only.& Private functions mostly used for Object Construction in private way.

Private Properties --> If you want to access outside then ->
    1. Getters
    2. Setters

Public Properties --> Can be accessed anywhere.


Inheritance:
1. Single Level Inheritance
2. Multi Level Inheritance
3. Multiple Inheritance
4. Hierarchial Inheritance
5. Hybrid Inheritance

==> Base Class --> Parent Class
==> Child Class

*** All public properties and all public functions can be accessed inside and as well as outside of the child class.
*** All private properties and all private functions cannot be accessd inside and as well outside of the child class.

*** All protected properties and all protected functions can be accessed inside the child class.

*** All protected properties and all protected functions can be accessible inside the same module only, but in python or any interpreted language it can be accessed anywhere since interpreter maintain only module.

Polymorphism:
1. Static Polymorphism --> Method Overloading --> Not supported in Python
2. Dynamic Polymorphism --> Method Overriding
    1. static method overriding
        "membership" operator
    2. dynamic method overriding
        "pointer" operator